- name: "{{ inner_service_title }} - aws vpn - vars"
  lrd.ext_cloud.vars:
    identifier: "aws_vpn"
    raw_data:
      namespace: "ext_vpn"
      state: "{{ inner_service_state }}"
      params: "{{ inner_service_params }}"
      credentials: "{{ inner_service_credentials }}"
      contents: "{{ inner_service_contents }}"
  register: ext_vpn_data_wrapper
  no_log: "{{ env_no_log }}"
  tags: ["no_print"]

- name: "{{ inner_service_title }} - aws vpn - vpc - info (absent)"
  vars:
    ext_vpn_item: "{{ ext_vpn_data_wrapper.data.vpc | default({}) }}"
  amazon.aws.ec2_vpc_net_info:
    access_key: "{{ ext_vpn_item.access_key }}"
    secret_key: "{{ ext_vpn_item.secret_key }}"
    region: "{{ ext_vpn_item.region }}"
    filters:
      "tag:Name": "{{ ext_vpn_item.name }}"
      cidr: >-
        {{
          (ext_vpn_item.cidr_block is string)
          | ternary(ext_vpn_item.cidr_block, ext_vpn_item.cidr_block[0] | default(''))
        }}
  when: >-
    ((ext_vpn_item.name | default('')) != '')
    and
    ((ext_vpn_item.state | default('')) == 'absent')
  register: ext_vpn_vpc_info
  no_log: "{{ env_no_log }}"

- name: "{{ inner_service_title }} - aws vpn - vpc - retrieve the route tables (vpc absent)"
  vars:
    ext_vpn_item: "{{ ext_vpn_data_wrapper.data.vpc | default({}) }}"
    ext_vpn_vpc_id: "{{ ext_vpn_vpc_info.vpcs[0].id | default('') }}"
  community.aws.ec2_vpc_route_table_info:
    access_key: "{{ ext_vpn_item.access_key }}"
    secret_key: "{{ ext_vpn_item.secret_key }}"
    region: "{{ ext_vpn_item.region }}"
    filters:
      vpc-id: "{{ ext_vpn_vpc_id }}"
  when: >-
    ((ext_vpn_item.state | default('')) == 'absent')
    and
    (ext_vpn_vpc_id != '')
  register: ext_vpn_route_table_info
  no_log: "{{ env_no_log }}"

- name: "{{ inner_service_title }} - aws vpn - vpc - route tables - execute (vpc absent)"
  vars:
    ext_vpn_vpc: "{{ ext_vpn_data_wrapper.data.vpc | default({}) }}"
    ext_vpn_vpc_id: "{{ ext_vpn_vpc_info.vpcs[0].id | default('') }}"
  amazon.aws.ec2_vpc_route_table:
    state: "absent"
    access_key: "{{ ext_vpn_vpc.access_key }}"
    secret_key: "{{ ext_vpn_vpc.secret_key }}"
    region: "{{ ext_vpn_vpc.region }}"
    vpc_id: "{{ ext_vpn_vpc_id }}"
    route_table_id: "{{ ext_vpn_item.route_table_id }}"
    lookup: "id"
  loop: "{{ ext_vpn_route_table_info.route_tables | default([]) }}"
  loop_control:
    loop_var: ext_vpn_item
    label: "{{ ext_vpn_item.route_table_id | default('') }}"
  when: >-
    ((ext_vpn_vpc.state | default('')) == 'absent')
    and
    (ext_vpn_vpc_id != '')
    and
    ((ext_vpn_item.route_table_id | default('')) != '')
    and
    (not (ext_vpn_item.associations[0].main | default(false) | bool))
  no_log: "{{ env_no_log }}"

- name: "{{ inner_service_title }} - aws vpn - delete the internet gateway"
  vars:
    ext_vpn_vpc: "{{ ext_vpn_data_wrapper.data.vpc | default({}) }}"
    ext_vpn_vpc_id: "{{ ext_vpn_vpc_info.vpcs[0].id | default('') }}"
  amazon.aws.ec2_vpc_igw:
    access_key: "{{ ext_vpn_vpc.access_key }}"
    secret_key: "{{ ext_vpn_vpc.secret_key }}"
    region: "{{ ext_vpn_vpc.region }}"
    vpc_id: "{{ ext_vpn_vpc_id }}"
    state: "absent"
  when: >-
    ((ext_vpn_vpc.state | default('')) == 'absent')
    and
    (ext_vpn_vpc_id != '')
  no_log: "{{ env_no_log }}"

- name: "{{ inner_service_title }} - aws vpn - subnets - execute (vpc absent)"
  vars:
    ext_vpn_vpc: "{{ ext_vpn_data_wrapper.data.vpc | default({}) }}"
    ext_vpn_vpc_id: "{{ ext_vpn_vpc_info.vpcs[0].id | default('') }}"
  amazon.aws.ec2_vpc_subnet:
    state: "{{ ext_vpn_vpc.state }}"
    access_key: "{{ ext_vpn_item.access_key }}"
    secret_key: "{{ ext_vpn_item.secret_key }}"
    vpc_id: "{{ ext_vpn_vpc_id }}"
    region: "{{ ext_vpn_item.region }}"
    cidr: "{{ ext_vpn_item.cidr }}"
    az: "{{ ext_vpn_item.az | default(omit, true) }}"
    map_public: "{{ ext_vpn_item.map_public | default(omit, true) }}"
    tags: "{{ ext_vpn_item.tags | default(omit, true) }}"
  loop: "{{ ext_vpn_data_wrapper.data.subnets }}"
  loop_control:
    loop_var: ext_vpn_item
    label: "[{{ ext_vpn_item.state }}] {{ ext_vpn_item.cidr }}"
  when: >-
    ((ext_vpn_vpc.state | default('')) == 'absent')
    and
    (ext_vpn_vpc_id != '')
  no_log: "{{ env_no_log }}"

- name: "{{ inner_service_title }} - aws vpn - retrieve security groups (vpc absent)"
  vars:
    ext_vpn_item: "{{ ext_vpn_data_wrapper.data.vpc | default({}) }}"
    ext_vpn_vpc_id: "{{ ext_vpn_vpc_info.vpcs[0].id | default('') }}"
  amazon.aws.ec2_group_info:
    access_key: "{{ ext_vpn_item.access_key }}"
    secret_key: "{{ ext_vpn_item.secret_key }}"
    region: "{{ ext_vpn_item.region }}"
    filters:
      vpc-id: "{{ ext_vpn_vpc_id }}"
  when: >-
    ((ext_vpn_item.state | default('')) == 'absent')
    and
    (ext_vpn_vpc_id != '')
  register: ext_vpn_group_info
  no_log: "{{ env_no_log }}"

- name: "{{ inner_service_title }} - aws vpn - delete security groups (vpc absent)"
  vars:
    ext_vpn_vpc: "{{ ext_vpn_data_wrapper.data.vpc | default({}) }}"
    ext_vpn_vpc_id: "{{ ext_vpn_vpc_info.vpcs[0].id | default('') }}"
  amazon.aws.ec2_group:
    access_key: "{{ ext_vpn_vpc.access_key }}"
    secret_key: "{{ ext_vpn_vpc.secret_key }}"
    region: "{{ ext_vpn_vpc.region }}"
    vpc_id: "{{ ext_vpn_vpc_id }}"
    group_id: "{{ ext_vpn_item.group_id }}"
    state: "absent"
  loop: "{{ ext_vpn_group_info.security_groups | default([]) }}"
  loop_control:
    loop_var: ext_vpn_item
    label: "{{ ext_vpn_item.group_id | default('') }}"
  when: >-
    ((ext_vpn_vpc.state | default('')) == 'absent')
    and
    (ext_vpn_vpc_id != '')
    and
    ((ext_vpn_item.group_id | default('')) != '')
    and
    ((ext_vpn_item.group_name | default('')) != 'default')
  no_log: "{{ env_no_log }}"

- name: >-
    {{ inner_service_title }}
    - aws vpn - vpc - execute
    ({{ ext_vpn_data_wrapper.data.vpc.state | default('') }})
  vars:
    ext_vpn_item: "{{ ext_vpn_data_wrapper.data.vpc | default({}) }}"
  amazon.aws.ec2_vpc_net:
    name: "{{ ext_vpn_item.name }}"
    state: "{{ ext_vpn_item.state }}"
    access_key: "{{ ext_vpn_item.access_key }}"
    secret_key: "{{ ext_vpn_item.secret_key }}"
    region: "{{ ext_vpn_item.region }}"
    cidr_block: "{{ ext_vpn_item.cidr_block }}"
    tags: "{{ ext_vpn_item.tags | default(omit, true) }}"
    tenancy: "{{ ext_vpn_item.tenancy | default(omit, true) }}"
  when: (ext_vpn_item.name | default('')) != ''
  register: ext_vpn_vpc_data
  no_log: "{{ env_no_log }}"

- name: "{{ inner_service_title }} - aws vpn - create the internet gateway"
  vars:
    ext_vpn_vpc: "{{ ext_vpn_data_wrapper.data.vpc | default({}) }}"
  amazon.aws.ec2_vpc_igw:
    access_key: "{{ ext_vpn_vpc.access_key }}"
    secret_key: "{{ ext_vpn_vpc.secret_key }}"
    region: "{{ ext_vpn_vpc.region }}"
    vpc_id: "{{ ext_vpn_vpc_data.vpc.id }}"
    tags:
      "tag:Name": "{{ ext_vpn_vpc.name }}-igw"
    state: "present"
  when: >-
    ((ext_vpn_vpc_data.vpc.id | default('')) != '')
    and
    ((ext_vpn_vpc.state | default('')) != 'absent')
    and
    (ext_vpn_vpc.public_vpc | default(false) | bool)
  register: ext_vpn_igw_data
  no_log: "{{ env_no_log }}"

- name: >-
    {{ inner_service_title }} - aws vpn
    - get the vpc main route table info
  vars:
    ext_vpn_vpc: "{{ ext_vpn_data_wrapper.data.vpc | default({}) }}"
  community.aws.ec2_vpc_route_table_info:
    access_key: "{{ ext_vpn_vpc.access_key }}"
    secret_key: "{{ ext_vpn_vpc.secret_key }}"
    region: "{{ ext_vpn_vpc.region }}"
    filters:
      vpc-id: "{{ ext_vpn_vpc_data.vpc.id }}"
      "association.main": "true"
  when: >-
    ((ext_vpn_vpc_data.vpc.id | default('')) != '')
    and
    ((ext_vpn_vpc.state | default('')) != 'absent')
    and
    (ext_vpn_vpc.public_vpc | default(false) | bool)
    and
    ((ext_vpn_igw_data.gateway_id | default('')) != '')
  register: ext_vpc_route_table_data
  no_log: "{{ env_no_log }}"

- name: >-
    {{ inner_service_title }} - aws vpn
    - define the main route table with access to the internet
  vars:
    ext_vpn_vpc: "{{ ext_vpn_data_wrapper.data.vpc | default({}) }}"
    ext_vpn_route_table_id: "{{ ext_vpc_route_table_data.route_tables[0].route_table_id | default('') }}"
  amazon.aws.ec2_vpc_route_table:
    access_key: "{{ ext_vpn_vpc.access_key }}"
    secret_key: "{{ ext_vpn_vpc.secret_key }}"
    region: "{{ ext_vpn_vpc.region }}"
    vpc_id: "{{ ext_vpn_vpc_data.vpc.id }}"
    route_table_id: "{{ ext_vpn_route_table_id }}"
    lookup: "id"
    routes:
      - dest: >-
          {{
            (ext_vpn_vpc.cidr_block is string)
            | ternary(ext_vpn_vpc.cidr_block, ext_vpn_vpc.cidr_block[0] | default(''))
          }}
        gateway_id: "local"
      - dest: "0.0.0.0/0"
        gateway_id: "{{ ext_vpn_igw_data.gateway_id }}"
  when: >-
    ((ext_vpn_vpc_data.vpc.id | default('')) != '')
    and
    ((ext_vpn_vpc.state | default('')) != 'absent')
    and
    (ext_vpn_vpc.public_vpc | default(false) | bool)
    and
    ((ext_vpn_route_table_id | default('')) != '')
  no_log: "{{ env_no_log }}"

- name: "{{ inner_service_title }} - aws vpn - subnets - execute (present)"
  amazon.aws.ec2_vpc_subnet:
    state: "{{ ext_vpn_item.state }}"
    access_key: "{{ ext_vpn_item.access_key }}"
    secret_key: "{{ ext_vpn_item.secret_key }}"
    vpc_id: "{{ ext_vpn_vpc_data.vpc.id }}"
    region: "{{ ext_vpn_item.region }}"
    az: "{{ ext_vpn_item.az | default(omit, true) }}"
    cidr: "{{ ext_vpn_item.cidr }}"
    tags: "{{ ext_vpn_item.tags | default(omit, true) }}"
  loop: "{{ ext_vpn_data_wrapper.data.subnets }}"
  loop_control:
    loop_var: ext_vpn_item
    label: "[{{ ext_vpn_item.state }}] {{ ext_vpn_item.cidr }}"
  when: >-
    ((ext_vpn_vpc_data.vpc.id | default('')) != '')
    and
    (ext_vpn_item.state == 'present')
  no_log: "{{ env_no_log }}"

- name: "{{ inner_service_title }} - aws vpn - security groups - execute"
  vars:
    ext_vpn_vpc: "{{ ext_vpn_data_wrapper.data.vpc | default({}) }}"
    ext_vpn_vpc_item_id: >-
      {{
        ext_vpn_item.vpc.id |
        default(ext_vpn_vpc_data.vpc.id | default(omit, true), true)
      }}
    ext_vpn_vpc_label: >-
      {{
        ext_vpn_item.vpc.id |
        default(ext_vpn_vpc_data.vpc.id | default('---', true), true)
      }}
  amazon.aws.ec2_group:
    name: "{{ ext_vpn_item.name }}"
    state: "{{ ext_vpn_item.state }}"
    access_key: "{{ ext_vpn_item.access_key }}"
    secret_key: "{{ ext_vpn_item.secret_key }}"
    region: "{{ ext_vpn_item.region }}"
    description: "{{ ext_vpn_item.description | default(omit, true) }}"
    vpc_id: "{{ ext_vpn_vpc_item_id }}"
    tags: "{{ ext_vpn_item.tags | default(omit, true) }}"
    rules: "{{ ext_vpn_item.rules }}"
    purge_rules: true
    purge_tags: true
  loop: "{{ ext_vpn_data_wrapper.data.security_groups }}"
  loop_control:
    loop_var: ext_vpn_item
    label: >-
      [{{ ext_vpn_item.state }}]
      {{ ext_vpn_item.name }}
      (vpc: {{ ext_vpn_vpc_label }})
  when: >-
    ((ext_vpn_vpc.name | default('')) == '')
    or
    ((ext_vpn_item.state | default('')) == 'present')
  no_log: "{{ env_no_log }}"
